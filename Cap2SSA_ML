#coding: utf-8

import numpy as np
import pandas as pd
import sklearn as sk
from tpot import TPOTRegressor
from sklearn.ensemble import ExtraTreesRegressor
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from xgboost import XGBRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split, cross_val_score, KFold
from sklearn.metrics import r2_score
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.linear_model import Ridge
from sklearn.svm import LinearSVR
from sklearn.neural_network import MLPRegressor

# input data
data_input=pd.read_csv('CaptoSSA-database-noDOI.csv', sep=',')

labels = data_input['Specific surface area (m2/g)']
features = data_input.drop('Specific surface area (m2/g)', axis=1)

X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=0)


lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

xgbr_model = XGBRegressor()
xgbr_model.fit(X_train, y_train)

rfr_model = RandomForestRegressor()
rfr_model.fit(X_train, y_train)

etr_model = ExtraTreesRegressor()
etr_model.fit(X_train, y_train)

knnr_model = KNeighborsRegressor()
knnr_model.fit(X_train, y_train)

dtr_model = DecisionTreeRegressor()
dtr_model.fit(X_train, y_train)

svr_model = SVR()
svr_model.fit(X_train, y_train)

gbr_model = GradientBoostingRegressor()
gbr_model.fit(X_train, y_train)

ridge_model = Ridge()
ridge_model.fit(X_train, y_train)

lsvr_model = LinearSVR()
lsvr_model.fit(X_train, y_train)

mlpr_model = MLPRegressor()
mlpr_model.fit(X_train, y_train)



kfold = KFold(n_splits=5,shuffle=True,random_state=0) 


print("\n 5-fold R2 score: ")
print("\tlr_mode", cross_val_score(lr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\txgbr_mode", cross_val_score(xgbr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\trfr_model", cross_val_score(rfr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tetr_model", cross_val_score(etr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tknnr_model", cross_val_score(knnr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tdtr_mode", cross_val_score(dtr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tsvr_model", cross_val_score(svr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tgbr_model", cross_val_score(gbr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tridge_model", cross_val_score(ridge_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tLinear Support Vector Regression", cross_val_score(lsvr_model, features, labels, scoring='r2', cv=kfold).mean())
print("\tMulti-layer Perceptron Regression", cross_val_score(mlpr_model , features, labels, scoring='r2', cv=kfold).mean())
